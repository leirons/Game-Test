# content of test_merge_1.py
# Positive test

import json

from pytest_bdd import scenario, given, then, when, parsers

from tests.models.board import Board


@scenario('merge.feature', 'Simple merge-1')
def test_merge_houses():
    pass


EXTRA_TYPES = {
    'String': str,
    "List": list
}

CONVERTERS = {
    'initial_board': str,
    "result_board": str,
    "user_queue": list,
    "changed_board": str,
    "user_place": str
}

with open('fixtures/positive/simple_merge-1.json') as file:
    json_data = json.loads(file.read())


@given(parsers.cfparse('Game board with default preset houses "{initial_board:String}"', extra_types=EXTRA_TYPES),
       target_fixture='game_board')
@given('Game board with default preset houses "initial_board"', target_fixture='game_board')
def game_in_progress(initial_board):
    board = Board()
    initial_board = json_data.get('initial_board')
    board.create_custom_board(initial_board)
    return {"initial_board": initial_board, "board": board}


@then(parsers.cfparse('User have in board queue "{user_queue:List}"', extra_types=EXTRA_TYPES),
      target_fixture='user_queue')
@then('User have in board queue "<user_queue>"')
def user_queue(user_queue):
    return {'user_queue': user_queue}


@when(parsers.cfparse('User place on "{user_place:String}"', extra_types=EXTRA_TYPES), target_fixture="change_board")
@when('User place on "<user_place>"')
def change_board(game_board, user_place):
    user_place = json_data.get(user_place)
    x, y = user_place
    board = game_board.get('initial_board')
    board[x][y] = 1
    return user_place


@then(parsers.cfparse(
    'A new "{result_board:String}" will be generated by user with the result of the merging 3 house lvl 1 into 1 house lvl 2',
    extra_types=EXTRA_TYPES))
@then(
    'A new "<result_board>" will be generated by user with the result of the merging 3 house lvl 1 into 1 house lvl 2')
def merge_house(change_board, game_board, result_board):
    result_board = json_data.get(result_board)
    board = game_board.get('board')
    board.merge_houses(game_board.get("initial_board"), result_board)
    x, y = change_board
    assert board.get_board() == result_board
    assert result_board[x][y] != 0
