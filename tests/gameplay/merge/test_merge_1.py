# content of test_merge_1.py
# Positive test

import pathlib

import yaml
from pytest_bdd import given, parsers, scenario, then, when

from game.models.board import Board


@scenario("merge.feature", "Simple merge-1")
def test_merge_houses():
    pass


EXTRA_TYPES = {"String": str, "List": str}

CONVERTERS = {
    "initial_board": str,
    "result_board": str,
    "user_queue": str,
    "changed_board": str,
    "user_place": str,
}


@given(
    parsers.cfparse(
        "Game board with default preset houses {file:String}", extra_types=EXTRA_TYPES
    ),
    target_fixture="game_board",
)
def game_in_progress(file):
    with (pathlib.Path(__file__).parent / file).open("r") as stream:
        data = yaml.safe_load(stream)
    board = Board()
    initial_board = data.get("board")
    board.create_custom_board(initial_board)
    return {"initial_board": initial_board, "board": board}


@then(
    parsers.cfparse("User have in board queue {data:List}", extra_types=EXTRA_TYPES),
    target_fixture="user_queue",
)
def user_queue(data):
    raw_data = data[1:-1].split(",")

    data = [int(i) for i in raw_data]
    return {"user_queue": data}


@when(
    parsers.cfparse("User place on {file:String}", extra_types=EXTRA_TYPES),
    target_fixture="change_board",
)
def change_board(game_board, file, user_queue):
    with (pathlib.Path(__file__).parent / file).open("r") as stream:
        data = yaml.safe_load(stream)
    user_place = data.get("user_place")
    x, y = user_place
    board = game_board.get("initial_board")
    user_queue = user_queue.get("user_queue")
    board[x][y] = user_queue[3]
    return user_place


@then(
    parsers.cfparse(
        "A new {file:String} will be generated by user with the result of the merging",
        extra_types=EXTRA_TYPES,
    )
)
def merge_house(change_board, game_board, file, user_queue):
    with (pathlib.Path(__file__).parent / file).open("r") as stream:
        data = yaml.safe_load(stream)

    result_board = data.get("board")
    board = game_board.get("board")
    board.merge_houses(game_board.get("initial_board"), result_board)
    x, y = change_board
    assert board.get_board() == result_board
    assert result_board[x][y] != 0
