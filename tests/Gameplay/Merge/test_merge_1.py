# content of test_stop_game.py
from pytest_bdd import scenario, given, then, when, parsers

from tests.models.board import Board


@scenario('merge.feature', 'Simple merge')
def test_merge_houses():
    pass


EXTRA_TYPES = {
    'String': str,
}

CONVERTERS = {
    'initial_board': str,
    "result_board": str,
    "user_queue": str,
    "changed_board": str
}


@given(parsers.cfparse('Game board with default preset houses <- "{initial_board:String}"', extra_types=EXTRA_TYPES),
       target_fixture='game_board')
@given('Game board with default preset houses <- "<initial_board>"', target_fixture='game_board')
def game_in_progress(initial_board):
    board = Board()
    board.create_custom_board(initial_board)
    return {"initial_board": initial_board, "board": board}


@then(parsers.cfparse('User have in board queue "{user_queue:String}"', extra_types=EXTRA_TYPES),
      target_fixture='user_queue')
@then('User have in board queue "<user_queue>"')
def user_queue(user_queue):
    return {'user_queue': user_queue}


@when(parsers.cfparse('User place on "{initial_board:String}"', extra_types=EXTRA_TYPES), target_fixture="change_board")
@when('User place on "<initial_board>"')
def change_board(initial_board):
    return initial_board


@then(parsers.cfparse(
    'A new "{result_board:String}" will be generated by user with the result of the merging 3 house lvl 1 into 1 house lvl 2',
    extra_types=EXTRA_TYPES))
@then(
    'A new "<result_board>" will be generated by user with the result of the merging 3 house lvl 1 into 1 house lvl 2')
def merge_house(result_board, game_board, user_queue, change_board):
    new_board = change_board
    board = game_board.get('board')
    assert board.get_board() == game_board.get('initial_board')
    board.create_custom_board(new_board)
    assert board.get_board() == new_board
    board.merge_houses(game_board.get("initial_board"), result_board)
    assert board.get_board() == result_board
